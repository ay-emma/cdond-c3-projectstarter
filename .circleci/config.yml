version: 2.1

parameters:
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        default: "workflow id"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>> 
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>> 


jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Test frontend
          command: |
            cd frontend
            npm install 
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Test backend
          command: |
            cd backend
            npm install 
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
    
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Scan backend 
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.73.0
            npm update mkdirp --depth 5
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances  \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.text
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["51:a3:30:a6:1f:ca:d1:70:73:f4:6a:3f:0c:fd:6a:21"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml 
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}  


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend: 
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      

            
